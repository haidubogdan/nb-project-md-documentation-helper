// Generated from MdAntlrLexer.g4 by ANTLR 4.13.0

  package org.antlr.parser.markdown;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class MdAntlrLexer extends LexerAdaptor {
	static { RuntimeMetaData.checkVersion("4.13.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, LI_PRE_WS=4, BLOCK_CODE=5, 
		TriBacktip=6, HTML=7, NL=8, WS=9, HEADER=10, BREAK_LINE=11, BOLD=12, ITALIC=13, 
		CODE=14, HYPER_LINK_LABEL=15, HYPER_LINK=16, RAW_TEXT=17;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"LI_PRE_WS", "LiPrefix", "BLOCK_CODE", "TriBacktip", "HTML", "HtmlElement", 
			"NL", "WS", "HEADER", "Header", "BREAK_LINE", "BOLD", "Bold", "DbAsterix", 
			"ITALIC", "Italic", "SgAsterix", "Backtip", "BacktickCode", "CODE", "HYPER_LINK_LABEL", 
			"HYPER_LINK", "RAW_TEXT"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, "'```'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "LI_PRE_WS", "BLOCK_CODE", 
			"TriBacktip", "HTML", "NL", "WS", "HEADER", "BREAK_LINE", "BOLD", "ITALIC", 
			"CODE", "HYPER_LINK_LABEL", "HYPER_LINK", "RAW_TEXT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public MdAntlrLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "MdAntlrLexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0:
			return LI_PRE_WS_sempred((RuleContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean LI_PRE_WS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return this.IsNewLineOrStart();
		}
		return true;
	}

	public static final String _serializedATN =
		"\u0004\u0000\u0011\u00f7\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0001\u0005\u00014\b\u0001\n\u0001\f\u00017\t\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0005\u0001<\b\u0001\n\u0001\f\u0001"+
		"?\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0005\u0001D\b\u0001\n\u0001"+
		"\f\u0001G\t\u0001\u0001\u0001\u0004\u0001J\b\u0001\u000b\u0001\f\u0001"+
		"K\u0001\u0001\u0001\u0001\u0003\u0001P\b\u0001\u0001\u0002\u0001\u0002"+
		"\u0005\u0002T\b\u0002\n\u0002\f\u0002W\t\u0002\u0001\u0002\u0001\u0002"+
		"\u0003\u0002[\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0005\u0005i\b\u0005\n\u0005\f\u0005l\t\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005r\b\u0005"+
		"\u0001\u0005\u0001\u0005\u0005\u0005v\b\u0005\n\u0005\f\u0005y\t\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005~\b\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0005\u0005\u0084\b\u0005\n\u0005"+
		"\f\u0005\u0087\t\u0005\u0001\u0005\u0003\u0005\u008a\b\u0005\u0003\u0005"+
		"\u008c\b\u0005\u0001\u0006\u0001\u0006\u0001\u0007\u0004\u0007\u0091\b"+
		"\u0007\u000b\u0007\f\u0007\u0092\u0001\b\u0001\b\u0001\t\u0004\t\u0098"+
		"\b\t\u000b\t\f\t\u0099\u0001\t\u0001\t\u0001\t\u0005\t\u009f\b\t\n\t\f"+
		"\t\u00a2\t\t\u0001\n\u0001\n\u0001\n\u0004\n\u00a7\b\n\u000b\n\f\n\u00a8"+
		"\u0001\n\u0005\n\u00ac\b\n\n\n\f\n\u00af\t\n\u0001\n\u0001\n\u0001\u000b"+
		"\u0001\u000b\u0001\f\u0001\f\u0005\f\u00b7\b\f\n\f\f\f\u00ba\t\f\u0001"+
		"\f\u0001\f\u0003\f\u00be\b\f\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001"+
		"\u000e\u0001\u000f\u0001\u000f\u0005\u000f\u00c7\b\u000f\n\u000f\f\u000f"+
		"\u00ca\t\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u00ce\b\u000f\u0001"+
		"\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0005\u0012\u00d7\b\u0012\n\u0012\f\u0012\u00da\t\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0005\u0014"+
		"\u00e2\b\u0014\n\u0014\f\u0014\u00e5\t\u0014\u0001\u0014\u0003\u0014\u00e8"+
		"\b\u0014\u0001\u0015\u0001\u0015\u0005\u0015\u00ec\b\u0015\n\u0015\f\u0015"+
		"\u00ef\t\u0015\u0001\u0015\u0003\u0015\u00f2\b\u0015\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0006Ujw\u0085\u00b8\u00c8\u0000\u0017"+
		"\u0001\u0004\u0003\u0000\u0005\u0005\u0007\u0006\t\u0007\u000b\u0000\r"+
		"\b\u000f\t\u0011\n\u0013\u0000\u0015\u000b\u0017\f\u0019\u0000\u001b\u0000"+
		"\u001d\r\u001f\u0000!\u0000#\u0000%\u0000\'\u000e)\u000f+\u0010-\u0011"+
		"\u0001\u0000\n\u0002\u0000\t\t  \u0001\u000009\u0001\u0001>>\u0002\u0000"+
		"\n\n\r\r\u0001\u0000  \u0001\u0000--\u0004\u0000\n\n\r\r()[[\u0001\u0001"+
		"]]\u0005\u0000\n\n\r\r(([[]]\u0001\u0001))\u0109\u0000\u0001\u0001\u0000"+
		"\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000"+
		"\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000"+
		"\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000"+
		"\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000"+
		"\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0000\'\u0001\u0000\u0000\u0000"+
		"\u0000)\u0001\u0000\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000-"+
		"\u0001\u0000\u0000\u0000\u0001/\u0001\u0000\u0000\u0000\u0003O\u0001\u0000"+
		"\u0000\u0000\u0005Q\u0001\u0000\u0000\u0000\u0007\\\u0001\u0000\u0000"+
		"\u0000\t`\u0001\u0000\u0000\u0000\u000b\u008b\u0001\u0000\u0000\u0000"+
		"\r\u008d\u0001\u0000\u0000\u0000\u000f\u0090\u0001\u0000\u0000\u0000\u0011"+
		"\u0094\u0001\u0000\u0000\u0000\u0013\u0097\u0001\u0000\u0000\u0000\u0015"+
		"\u00a6\u0001\u0000\u0000\u0000\u0017\u00b2\u0001\u0000\u0000\u0000\u0019"+
		"\u00b4\u0001\u0000\u0000\u0000\u001b\u00bf\u0001\u0000\u0000\u0000\u001d"+
		"\u00c2\u0001\u0000\u0000\u0000\u001f\u00c4\u0001\u0000\u0000\u0000!\u00cf"+
		"\u0001\u0000\u0000\u0000#\u00d1\u0001\u0000\u0000\u0000%\u00d3\u0001\u0000"+
		"\u0000\u0000\'\u00dd\u0001\u0000\u0000\u0000)\u00df\u0001\u0000\u0000"+
		"\u0000+\u00e9\u0001\u0000\u0000\u0000-\u00f3\u0001\u0000\u0000\u0000/"+
		"0\u0004\u0000\u0000\u000001\u0003\u0003\u0001\u00001\u0002\u0001\u0000"+
		"\u0000\u000024\u0007\u0000\u0000\u000032\u0001\u0000\u0000\u000047\u0001"+
		"\u0000\u0000\u000053\u0001\u0000\u0000\u000056\u0001\u0000\u0000\u0000"+
		"68\u0001\u0000\u0000\u000075\u0001\u0000\u0000\u000089\u0005-\u0000\u0000"+
		"9P\u0005 \u0000\u0000:<\u0007\u0000\u0000\u0000;:\u0001\u0000\u0000\u0000"+
		"<?\u0001\u0000\u0000\u0000=;\u0001\u0000\u0000\u0000=>\u0001\u0000\u0000"+
		"\u0000>@\u0001\u0000\u0000\u0000?=\u0001\u0000\u0000\u0000@A\u0005*\u0000"+
		"\u0000AP\u0005 \u0000\u0000BD\u0007\u0000\u0000\u0000CB\u0001\u0000\u0000"+
		"\u0000DG\u0001\u0000\u0000\u0000EC\u0001\u0000\u0000\u0000EF\u0001\u0000"+
		"\u0000\u0000FI\u0001\u0000\u0000\u0000GE\u0001\u0000\u0000\u0000HJ\u0007"+
		"\u0001\u0000\u0000IH\u0001\u0000\u0000\u0000JK\u0001\u0000\u0000\u0000"+
		"KI\u0001\u0000\u0000\u0000KL\u0001\u0000\u0000\u0000LM\u0001\u0000\u0000"+
		"\u0000MN\u0005.\u0000\u0000NP\u0005 \u0000\u0000O5\u0001\u0000\u0000\u0000"+
		"O=\u0001\u0000\u0000\u0000OE\u0001\u0000\u0000\u0000P\u0004\u0001\u0000"+
		"\u0000\u0000QU\u0003\u0007\u0003\u0000RT\t\u0000\u0000\u0000SR\u0001\u0000"+
		"\u0000\u0000TW\u0001\u0000\u0000\u0000UV\u0001\u0000\u0000\u0000US\u0001"+
		"\u0000\u0000\u0000VZ\u0001\u0000\u0000\u0000WU\u0001\u0000\u0000\u0000"+
		"X[\u0003\u0007\u0003\u0000Y[\u0005\u0000\u0000\u0001ZX\u0001\u0000\u0000"+
		"\u0000ZY\u0001\u0000\u0000\u0000[\u0006\u0001\u0000\u0000\u0000\\]\u0005"+
		"`\u0000\u0000]^\u0005`\u0000\u0000^_\u0005`\u0000\u0000_\b\u0001\u0000"+
		"\u0000\u0000`a\u0003\u000b\u0005\u0000a\n\u0001\u0000\u0000\u0000bc\u0005"+
		"<\u0000\u0000cd\u0005!\u0000\u0000de\u0005-\u0000\u0000ef\u0005-\u0000"+
		"\u0000fj\u0001\u0000\u0000\u0000gi\t\u0000\u0000\u0000hg\u0001\u0000\u0000"+
		"\u0000il\u0001\u0000\u0000\u0000jk\u0001\u0000\u0000\u0000jh\u0001\u0000"+
		"\u0000\u0000kq\u0001\u0000\u0000\u0000lj\u0001\u0000\u0000\u0000mn\u0005"+
		"-\u0000\u0000no\u0005-\u0000\u0000or\u0005>\u0000\u0000pr\u0005\u0000"+
		"\u0000\u0001qm\u0001\u0000\u0000\u0000qp\u0001\u0000\u0000\u0000r\u008c"+
		"\u0001\u0000\u0000\u0000sw\u0005<\u0000\u0000tv\t\u0000\u0000\u0000ut"+
		"\u0001\u0000\u0000\u0000vy\u0001\u0000\u0000\u0000wx\u0001\u0000\u0000"+
		"\u0000wu\u0001\u0000\u0000\u0000x}\u0001\u0000\u0000\u0000yw\u0001\u0000"+
		"\u0000\u0000z{\u0005/\u0000\u0000{~\u0005>\u0000\u0000|~\u0007\u0002\u0000"+
		"\u0000}z\u0001\u0000\u0000\u0000}|\u0001\u0000\u0000\u0000~\u008c\u0001"+
		"\u0000\u0000\u0000\u007f\u0080\u0005<\u0000\u0000\u0080\u0081\u0005/\u0000"+
		"\u0000\u0081\u0085\u0001\u0000\u0000\u0000\u0082\u0084\t\u0000\u0000\u0000"+
		"\u0083\u0082\u0001\u0000\u0000\u0000\u0084\u0087\u0001\u0000\u0000\u0000"+
		"\u0085\u0086\u0001\u0000\u0000\u0000\u0085\u0083\u0001\u0000\u0000\u0000"+
		"\u0086\u0089\u0001\u0000\u0000\u0000\u0087\u0085\u0001\u0000\u0000\u0000"+
		"\u0088\u008a\u0007\u0002\u0000\u0000\u0089\u0088\u0001\u0000\u0000\u0000"+
		"\u008a\u008c\u0001\u0000\u0000\u0000\u008bb\u0001\u0000\u0000\u0000\u008b"+
		"s\u0001\u0000\u0000\u0000\u008b\u007f\u0001\u0000\u0000\u0000\u008c\f"+
		"\u0001\u0000\u0000\u0000\u008d\u008e\u0007\u0003\u0000\u0000\u008e\u000e"+
		"\u0001\u0000\u0000\u0000\u008f\u0091\u0007\u0000\u0000\u0000\u0090\u008f"+
		"\u0001\u0000\u0000\u0000\u0091\u0092\u0001\u0000\u0000\u0000\u0092\u0090"+
		"\u0001\u0000\u0000\u0000\u0092\u0093\u0001\u0000\u0000\u0000\u0093\u0010"+
		"\u0001\u0000\u0000\u0000\u0094\u0095\u0003\u0013\t\u0000\u0095\u0012\u0001"+
		"\u0000\u0000\u0000\u0096\u0098\u0005#\u0000\u0000\u0097\u0096\u0001\u0000"+
		"\u0000\u0000\u0098\u0099\u0001\u0000\u0000\u0000\u0099\u0097\u0001\u0000"+
		"\u0000\u0000\u0099\u009a\u0001\u0000\u0000\u0000\u009a\u009b\u0001\u0000"+
		"\u0000\u0000\u009b\u009c\u0007\u0004\u0000\u0000\u009c\u00a0\u0001\u0000"+
		"\u0000\u0000\u009d\u009f\b\u0003\u0000\u0000\u009e\u009d\u0001\u0000\u0000"+
		"\u0000\u009f\u00a2\u0001\u0000\u0000\u0000\u00a0\u009e\u0001\u0000\u0000"+
		"\u0000\u00a0\u00a1\u0001\u0000\u0000\u0000\u00a1\u0014\u0001\u0000\u0000"+
		"\u0000\u00a2\u00a0\u0001\u0000\u0000\u0000\u00a3\u00a4\u0005-\u0000\u0000"+
		"\u00a4\u00a5\u0005-\u0000\u0000\u00a5\u00a7\u0005-\u0000\u0000\u00a6\u00a3"+
		"\u0001\u0000\u0000\u0000\u00a7\u00a8\u0001\u0000\u0000\u0000\u00a8\u00a6"+
		"\u0001\u0000\u0000\u0000\u00a8\u00a9\u0001\u0000\u0000\u0000\u00a9\u00ad"+
		"\u0001\u0000\u0000\u0000\u00aa\u00ac\u0007\u0005\u0000\u0000\u00ab\u00aa"+
		"\u0001\u0000\u0000\u0000\u00ac\u00af\u0001\u0000\u0000\u0000\u00ad\u00ab"+
		"\u0001\u0000\u0000\u0000\u00ad\u00ae\u0001\u0000\u0000\u0000\u00ae\u00b0"+
		"\u0001\u0000\u0000\u0000\u00af\u00ad\u0001\u0000\u0000\u0000\u00b0\u00b1"+
		"\b\u0003\u0000\u0000\u00b1\u0016\u0001\u0000\u0000\u0000\u00b2\u00b3\u0003"+
		"\u0019\f\u0000\u00b3\u0018\u0001\u0000\u0000\u0000\u00b4\u00b8\u0003\u001b"+
		"\r\u0000\u00b5\u00b7\t\u0000\u0000\u0000\u00b6\u00b5\u0001\u0000\u0000"+
		"\u0000\u00b7\u00ba\u0001\u0000\u0000\u0000\u00b8\u00b9\u0001\u0000\u0000"+
		"\u0000\u00b8\u00b6\u0001\u0000\u0000\u0000\u00b9\u00bd\u0001\u0000\u0000"+
		"\u0000\u00ba\u00b8\u0001\u0000\u0000\u0000\u00bb\u00be\u0003\u001b\r\u0000"+
		"\u00bc\u00be\u0005\u0000\u0000\u0001\u00bd\u00bb\u0001\u0000\u0000\u0000"+
		"\u00bd\u00bc\u0001\u0000\u0000\u0000\u00be\u001a\u0001\u0000\u0000\u0000"+
		"\u00bf\u00c0\u0005*\u0000\u0000\u00c0\u00c1\u0005*\u0000\u0000\u00c1\u001c"+
		"\u0001\u0000\u0000\u0000\u00c2\u00c3\u0003\u001f\u000f\u0000\u00c3\u001e"+
		"\u0001\u0000\u0000\u0000\u00c4\u00c8\u0003!\u0010\u0000\u00c5\u00c7\t"+
		"\u0000\u0000\u0000\u00c6\u00c5\u0001\u0000\u0000\u0000\u00c7\u00ca\u0001"+
		"\u0000\u0000\u0000\u00c8\u00c9\u0001\u0000\u0000\u0000\u00c8\u00c6\u0001"+
		"\u0000\u0000\u0000\u00c9\u00cd\u0001\u0000\u0000\u0000\u00ca\u00c8\u0001"+
		"\u0000\u0000\u0000\u00cb\u00ce\u0003!\u0010\u0000\u00cc\u00ce\u0005\u0000"+
		"\u0000\u0001\u00cd\u00cb\u0001\u0000\u0000\u0000\u00cd\u00cc\u0001\u0000"+
		"\u0000\u0000\u00ce \u0001\u0000\u0000\u0000\u00cf\u00d0\u0005*\u0000\u0000"+
		"\u00d0\"\u0001\u0000\u0000\u0000\u00d1\u00d2\u0005`\u0000\u0000\u00d2"+
		"$\u0001\u0000\u0000\u0000\u00d3\u00d8\u0003#\u0011\u0000\u00d4\u00d7\u0003"+
		"#\u0011\u0000\u00d5\u00d7\b\u0003\u0000\u0000\u00d6\u00d4\u0001\u0000"+
		"\u0000\u0000\u00d6\u00d5\u0001\u0000\u0000\u0000\u00d7\u00da\u0001\u0000"+
		"\u0000\u0000\u00d8\u00d6\u0001\u0000\u0000\u0000\u00d8\u00d9\u0001\u0000"+
		"\u0000\u0000\u00d9\u00db\u0001\u0000\u0000\u0000\u00da\u00d8\u0001\u0000"+
		"\u0000\u0000\u00db\u00dc\u0003#\u0011\u0000\u00dc&\u0001\u0000\u0000\u0000"+
		"\u00dd\u00de\u0003%\u0012\u0000\u00de(\u0001\u0000\u0000\u0000\u00df\u00e3"+
		"\u0005[\u0000\u0000\u00e0\u00e2\b\u0006\u0000\u0000\u00e1\u00e0\u0001"+
		"\u0000\u0000\u0000\u00e2\u00e5\u0001\u0000\u0000\u0000\u00e3\u00e1\u0001"+
		"\u0000\u0000\u0000\u00e3\u00e4\u0001\u0000\u0000\u0000\u00e4\u00e7\u0001"+
		"\u0000\u0000\u0000\u00e5\u00e3\u0001\u0000\u0000\u0000\u00e6\u00e8\u0007"+
		"\u0007\u0000\u0000\u00e7\u00e6\u0001\u0000\u0000\u0000\u00e8*\u0001\u0000"+
		"\u0000\u0000\u00e9\u00ed\u0005(\u0000\u0000\u00ea\u00ec\b\b\u0000\u0000"+
		"\u00eb\u00ea\u0001\u0000\u0000\u0000\u00ec\u00ef\u0001\u0000\u0000\u0000"+
		"\u00ed\u00eb\u0001\u0000\u0000\u0000\u00ed\u00ee\u0001\u0000\u0000\u0000"+
		"\u00ee\u00f1\u0001\u0000\u0000\u0000\u00ef\u00ed\u0001\u0000\u0000\u0000"+
		"\u00f0\u00f2\u0007\t\u0000\u0000\u00f1\u00f0\u0001\u0000\u0000\u0000\u00f2"+
		",\u0001\u0000\u0000\u0000\u00f3\u00f4\t\u0000\u0000\u0000\u00f4\u00f5"+
		"\u0001\u0000\u0000\u0000\u00f5\u00f6\u0006\u0016\u0000\u0000\u00f6.\u0001"+
		"\u0000\u0000\u0000\u001e\u00005=EKOUZjqw}\u0085\u0089\u008b\u0092\u0099"+
		"\u00a0\u00a8\u00ad\u00b8\u00bd\u00c8\u00cd\u00d6\u00d8\u00e3\u00e7\u00ed"+
		"\u00f1\u0001\u0000\u0001\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}